library(UsingR)
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
myPlot
shiny::runApp('My_App')
setwd(C:/Users/Montserrat/Documents/Coursera Working Directory/Salary)
setwd("C:/Users/Montserrat/Documents/Coursera Working Directory/Salary")
runApp()
library(shiny)
runApp()
runApp()
runApp()
deployApp()
deployApp()
DeployApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
n?numericInput
?numericInput
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp(display.mode="showcase")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shinyapps::showLogs()
shinyapps::showLogs()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
my.offer <- reactive({input$x1=1000, input$x2=15000, input$ev.no=8000,input$py.x2=0.25,input$py.x1=0.75,high=input$x1+50000,p.payoff=1){
theta <- solve(matrix(c(1,1,input$x1,input$x2),nc=2),matrix(qlogis(c(input$py.x1,input$py.x2)),nc=1))
payoff <- function(x) {
tmp <- exp(-theta[1]-theta[2]*x)
return( (input$ev.no + ifelse(input$ev.no>x*p.payoff,input$ev.no,x*p.payoff)*tmp)/(1+tmp) )
}
return(optimize(payoff,interval=c(input$ev.no,high),maximum=TRUE))
})
my.offer <- reactive({input$x1=1000, input$x2=15000, input$ev.no=8000,input$py.x2=0.25,input$py.x1=0.75,high=input$x1+50000,p.payoff=1){
theta <- solve(matrix(c(1,1,input$x1,input$x2),nc=2),matrix(qlogis(c(input$py.x1,input$py.x2)),nc=1))
payoff <- function(x) {
tmp <- exp(-theta[1]-theta[2]*x)
return( (input$ev.no + ifelse(input$ev.no>x*p.payoff,input$ev.no,x*p.payoff)*tmp)/(1+tmp) )
}
return(optimize(payoff,interval=c(input$ev.no,high),maximum=TRUE))
})
my.offer <- function(input$x1=1000, input$x2=15000, input$ev.no=8000,input$py.x2=0.25,input$py.x1=0.75,high=input$x1+50000,p.payoff=1){
theta <- solve(matrix(c(1,1,input$x1,input$x2),nc=2),matrix(qlogis(c(input$py.x1,input$py.x2)),nc=1))
payoff <- function(x) {
tmp <- exp(-theta[1]-theta[2]*x)
return( (input$ev.no + ifelse(input$ev.no>x*p.payoff,input$ev.no,x*p.payoff)*tmp)/(1+tmp) )
}
return(optimize(payoff,interval=c(input$ev.no,high),maximum=TRUE))
})
my.offer <- function(input$x1=1000, input$x2=15000, input$ev.no=8000,input$py.x2=0.25,input$py.x1=0.75,high=input$x1+50000,p.payoff=1){
theta <- solve(matrix(c(1,1,input$x1,input$x2),nc=2),matrix(qlogis(c(input$py.x1,input$py.x2)),nc=1))
payoff <- function(x) {
tmp <- exp(-theta[1]-theta[2]*x)
return( (input$ev.no + ifelse(input$ev.no>x*p.payoff,input$ev.no,x*p.payoff)*tmp)/(1+tmp) )
}
return(optimize(payoff,interval=c(input$ev.no,high),maximum=TRUE))
}
my.offer <- function(input$x1=1000, input$x2=15000, input$ev.no=8000,input$py.x2=0.25,input$py.x1=0.75,high=input$x1+50000,p.payoff=1){
theta <- solve(matrix(c(1,1,input$x1,input$x2),nc=2),matrix(qlogis(c(input$py.x1,input$py.x2)),nc=1))
payoff <- function(x) {
tmp <- exp(-theta[1]-theta[2]*x)
return( (input$ev.no + ifelse(input$ev.no>x*p.payoff,input$ev.no,x*p.payoff)*tmp)/(1+tmp) )
}
return(optimize(payoff,interval=c(input$ev.no,high),maximum=TRUE))
}
my.offer <- function(input$x1=1000, input$x2=15000, input$ev.no=8000,input$py.x2=0.25,input$py.x1=0.75,high=input$x1+50000,p.payoff=1){
theta <- solve(matrix(c(1,1,input$x1,input$x2),nc=2),matrix(qlogis(c(input$py.x1,input$py.x2)),nc=1))
payoff <- function(x) {
tmp <- exp(-theta[1]-theta[2]*x)
return( (input$ev.no + ifelse(input$ev.no>x*p.payoff,input$ev.no,x*p.payoff)*tmp)/(1+tmp) )
}
return(optimize(payoff,interval=c(input$ev.no,high),maximum=TRUE))
my.offer()
}
y.offer <- function(input$x1=1000, input$x2=15000, input$ev.no=8000,input$py.x2=0.25,input$py.x1=0.75,high=input$x1+50000,p.payoff=1){
theta <- solve(matrix(c(1,1,input$x1,input$x2),nc=2),matrix(qlogis(c(input$py.x1,input$py.x2)),nc=1))
payoff <- function(x) {
tmp <- exp(-theta[1]-theta[2]*x)
return( (input$ev.no + ifelse(input$ev.no>x*p.payoff,input$ev.no,x*p.payoff)*tmp)/(1+tmp) )
}
return(optimize(payoff,interval=c(input$ev.no,high),maximum=TRUE))
my.offer()
}
my.offer <- function(input$x1=1000, input$x2=15000, input$ev.no=8000,input$py.x2=0.25,input$py.x1=0.75,high=input$x1+50000,p.payoff=1){
theta <- solve(matrix(c(1,1,input$x1,input$x2),nc=2),matrix(qlogis(c(input$py.x1,input$py.x2)),nc=1))
payoff <- function(x) {
tmp <- exp(-theta[1]-theta[2]*x)
return( (input$ev.no + ifelse(input$ev.no>x*p.payoff,input$ev.no,x*p.payoff)*tmp)/(1+tmp) )
}
return(optimize(payoff,interval=c(input$ev.no,high),maximum=TRUE))
my.offer()
}
my.offer <- function(input$x1=1000, input$x2=15000, input$ev.no=8000,input$py.x2=0.25,input$py.x1=0.75,high=input$x1+50000,p.payoff=1){
theta <- solve(matrix(c(1,1,input$x1,input$x2),nc=2),matrix(qlogis(c(input$py.x1,input$py.x2)),nc=1))
payoff <- function(x) {
tmp <- exp(-theta[1]-theta[2]*x)
return( (input$ev.no + ifelse(input$ev.no>x*p.payoff,input$ev.no,x*p.payoff)*tmp)/(1+tmp) )
}
return(optimize(payoff,interval=c(input$ev.no,high),maximum=TRUE))
}
my.offer()
my.offer <- function(ix1=1000, x2=15000, ev.no=8000,py.x2=0.25,py.x1=0.75,high=x1+50000,p.payoff=1){
theta <- solve(matrix(c(1,1,x1,x2),nc=2),matrix(qlogis(c(py.x1,py.x2)),nc=1))
payoff <- function(x) {
tmp <- exp(-theta[1]-theta[2]*x)
return( (ev.no + ifelse(ev.no>x*p.payoff,ev.no,x*p.payoff)*tmp)/(1+tmp) )
}
return(optimize(payoff,interval=c(ev.no,high),maximum=TRUE))
}
my.offer()
my.offer <- function(x1=1000, x2=15000, ev.no=8000,py.x2=0.25,py.x1=0.75,high=x1+50000,p.payoff=1){
theta <- solve(matrix(c(1,1,x1,x2),nc=2),matrix(qlogis(c(py.x1,py.x2)),nc=1))
payoff <- function(x) {
tmp <- exp(-theta[1]-theta[2]*x)
return( (ev.no + ifelse(ev.no>x*p.payoff,ev.no,x*p.payoff)*tmp)/(1+tmp) )
}
return(optimize(payoff,interval=c(ev.no,high),maximum=TRUE))
}
my.offer()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
my.offer <- function(x1=60,py.x1=.2,x2=70,py.x2=.8,ev.no=50,high=100,p.payoff=1) {
# return the offer to maximize expected payoff
# this assumes a game with one decision and one consequence
# you give an offer, and it is taken or refused. If taken, you receive a salary of
# (a function of) the offer. If refused, you stay at the old job and receive a
# salary of ev.no (presumably a current salary, but set to 0 if you are
# unemployed).
# the probability of rejection is modeled with a logistic function defined by
# two points (x1,py.x1) and (x2,py.x2)
# for example, if you expected a 20% rej. prob. with an offer of 140k, then
# x1,py.x1 = 140,.2. Similarly with x2,py.x2
# the expected payoff is modeled as offer*P(Yes|offer) + ev.no*P(No|offer),
# perhaps with  modifications to account for benefits, negotiation, etc. This
# is defined in payoff function below.
# finally, high is defined as anything above what you would be expecting to offer
# and is used to create the plot limits and set the bounds in the optimization
# routine.   # model the probability of no given salary offer
# here we have a logistic function defined by (x1,py.x1) and (x2,py.x2)
# note that qlogis is the inverse logit function
# also, matrices in R are defined in column-major form, not row-major form like
# FORTRAN, so we have to use 1,1,x1,x2 rather than 1,x1,1,x2
theta <- solve(matrix(c(1,1,x1,x2),nc=2),matrix(qlogis(c(py.x1,py.x2)),nc=1))   # for plot of probability function
xseq <- seq(ev.no,high,length=100)
yseq1 <- 1/(1+exp(-theta[1]-theta[2]*xseq))   # model the expected payoff of an offer
# model negotiations, benefits, and other things here
# (a simple way to model benefits though is just to change ev.no)
payoff <- function(x) {
tmp <- exp(-theta[1]-theta[2]*x)
return( (ev.no + ifelse(ev.no>x*p.payoff,ev.no,x*p.payoff)*tmp)/(1+tmp) )
}
yseq <- payoff(xseq)   # plots
par(mfrow=c(1,2))
plot(xseq,yseq1,type='l',xlab='Offer',ylab='P(No|X)')
plot(xseq,yseq,type='l',xlab='Offer',ylab='Expected salary')   # no sense in even discussing the matter if offer < ev.no
return(optimize(payoff,interval=c(ev.no,high),maximum=TRUE))
my.offer()
my.offer <- function(x1=60,py.x1=.2,x2=70,py.x2=.8,ev.no=50,high=100,p.payoff=1) {
# return the offer to maximize expected payoff
# this assumes a game with one decision and one consequence
# you give an offer, and it is taken or refused. If taken, you receive a salary of
# (a function of) the offer. If refused, you stay at the old job and receive a
# salary of ev.no (presumably a current salary, but set to 0 if you are
# unemployed).
# the probability of rejection is modeled with a logistic function defined by
# two points (x1,py.x1) and (x2,py.x2)
# for example, if you expected a 20% rej. prob. with an offer of 140k, then
# x1,py.x1 = 140,.2. Similarly with x2,py.x2
# the expected payoff is modeled as offer*P(Yes|offer) + ev.no*P(No|offer),
# perhaps with  modifications to account for benefits, negotiation, etc. This
# is defined in payoff function below.
# finally, high is defined as anything above what you would be expecting to offer
# and is used to create the plot limits and set the bounds in the optimization
# routine.   # model the probability of no given salary offer
# here we have a logistic function defined by (x1,py.x1) and (x2,py.x2)
# note that qlogis is the inverse logit function
# also, matrices in R are defined in column-major form, not row-major form like
# FORTRAN, so we have to use 1,1,x1,x2 rather than 1,x1,1,x2
theta <- solve(matrix(c(1,1,x1,x2),nc=2),matrix(qlogis(c(py.x1,py.x2)),nc=1))   # for plot of probability function
xseq <- seq(ev.no,high,length=100)
yseq1 <- 1/(1+exp(-theta[1]-theta[2]*xseq))   # model the expected payoff of an offer
# model negotiations, benefits, and other things here
# (a simple way to model benefits though is just to change ev.no)
payoff <- function(x) {
tmp <- exp(-theta[1]-theta[2]*x)
return( (ev.no + ifelse(ev.no>x*p.payoff,ev.no,x*p.payoff)*tmp)/(1+tmp) )
}
yseq <- payoff(xseq)   # plots
par(mfrow=c(1,2))
plot(xseq,yseq1,type='l',xlab='Offer',ylab='P(No|X)')
plot(xseq,yseq,type='l',xlab='Offer',ylab='Expected salary')   # no sense in even discussing the matter if offer < ev.no
return(optimize(payoff,interval=c(ev.no,high),maximum=TRUE))
my.offer()
}
my.offer()
?optomize
?optimize
shiny::runApp()
shinyapps::deployApp()
shinyapps::deployApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(slidify)
shiny::runApp()
shiny::runApp()
shiny::runApp()
setwd ("C:\Users\Montserrat\Documents\Coursera Working Directory\Salary App Presentation")
setwd ("C:/Users/Montserrat/Documents/Coursera Working Directory/Salary App Presentation")
library(devtools)
library(slidify)
library("slidify", lib.loc="~/R/win-library/3.2")
library(slidify)
